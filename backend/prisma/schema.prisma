generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model school_attendence {
  attendence_id  Int            @id @default(autoincrement())
  att_date       DateTime       @db.Date
  att_status     Boolean
  att_remarks    String?        @db.Text
  att_student_id Int
  att_school_id  Int
  user_school    user_school    @relation(fields: [att_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "att_school")
  school_student school_student @relation(fields: [att_student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "att_student")

  @@index([att_school_id], map: "att_school_idx")
  @@index([att_student_id], map: "att_student_idx")
}

model school_class_room {
  class_id         Int                @id @default(autoincrement())
  cl_batch_year    Int                @db.Year
  cl_grade_id      Int
  cl_section       String             @db.Char(2)
  cl_status        Boolean?
  cl_remarks       String?            @db.VarChar(45)
  cl_teacher_id    Int
  cl_school_id     Int
  school_grade     school_grade       @relation(fields: [cl_grade_id], references: [grade_id], onDelete: NoAction, onUpdate: NoAction, map: "class_grade")
  user_school      user_school        @relation(fields: [cl_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "class_school")
  school_timetable school_timetable[]

  @@index([cl_grade_id], map: "class_grade_idx")
  @@index([cl_school_id], map: "class_school_idx")
}

model school_course {
  course_id          Int                  @id @default(autoincrement())
  course_name        String               @db.VarChar(45)
  course_desription  String               @db.VarChar(45)
  course_grade_id    Int
  course_school_id   Int
  school_grade       school_grade         @relation(fields: [course_grade_id], references: [grade_id], onDelete: NoAction, onUpdate: NoAction, map: "course_grade")
  user_school        user_school          @relation(fields: [course_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "course_school")
  school_exam_result school_exam_result[]
  school_timetable   school_timetable[]

  @@index([course_grade_id], map: "course_grade_idx")
  @@index([course_school_id], map: "grade_school_idx")
}

model school_exam {
  exam_id            Int                  @id @default(autoincrement())
  exam_type_id       Int
  exam_name          String               @db.VarChar(45)
  exam_start_date    DateTime             @db.Date
  exam_school_id     Int
  user_school        user_school          @relation(fields: [exam_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "exam_school")
  school_exam_type   school_exam_type     @relation(fields: [exam_type_id], references: [exam_type_id], onDelete: NoAction, onUpdate: NoAction, map: "exam_type")
  school_exam_result school_exam_result[]

  @@index([exam_school_id], map: "exam_school_idx")
  @@index([exam_type_id], map: "exam_type_idx")
}

model school_exam_result {
  exam_result_id   Int            @id @default(autoincrement())
  examr_exam_id    Int
  examr_student_id Int
  examr_course_id  Int
  examr_marks      String         @db.VarChar(45)
  examr_school_jd  Int
  school_course    school_course  @relation(fields: [examr_course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "examr_course")
  school_exam      school_exam    @relation(fields: [examr_exam_id], references: [exam_id], onDelete: NoAction, onUpdate: NoAction, map: "examr_exam")
  user_school      user_school    @relation(fields: [examr_school_jd], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "examr_school")
  school_student   school_student @relation(fields: [examr_student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "examr_student")

  @@index([examr_course_id], map: "course_marks")
  @@index([examr_exam_id], map: "exam_det")
  @@index([examr_school_jd], map: "examr_school_idx")
  @@index([examr_student_id], map: "student_exam")
}

model school_exam_type {
  exam_type_id      Int           @id @default(autoincrement())
  examt_name        String        @db.VarChar(45)
  examt_description String?       @db.VarChar(45)
  examt_school_id   Int
  user_school       user_school   @relation(fields: [examt_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "examt_school")
  school_exam       school_exam[]

  @@index([examt_school_id], map: "examt_school_idx")
}

model school_grade {
  grade_id          Int                 @id @default(autoincrement())
  grade_name        String              @unique(map: "name") @db.VarChar(45)
  grade_descripton  String?             @db.VarChar(45)
  grade_school_id   Int
  user_school       user_school         @relation(fields: [grade_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "grade_school")
  school_class_room school_class_room[]
  school_course     school_course[]

  @@index([grade_school_id], map: "grade_school_idx")
}

model school_parent {
  parent_id        Int              @id @default(autoincrement())
  parent_phone     String           @db.VarChar(15)
  parent_status    Boolean?
  parent_school_id Int
  parent_user_id   Int
  user_school      user_school      @relation(fields: [parent_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "parent_school")
  user             user             @relation(fields: [parent_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "parent_user")
  school_student   school_student[]

  @@index([parent_school_id], map: "parent_school_idx")
  @@index([parent_user_id], map: "parent_user_idx")
}

model school_student {
  student_id         Int                  @id @default(autoincrement())
  student_dob        DateTime             @db.Date
  student_join_date  DateTime             @db.Date
  student_status     Boolean?
  student_parent_id  Int
  student_class_id   Int?
  student_school_id  Int
  student_user_id    Int
  school_parent      school_parent        @relation(fields: [student_parent_id], references: [parent_id], onDelete: NoAction, onUpdate: NoAction, map: "student_parent")
  user_school        user_school          @relation(fields: [student_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "student_school")
  user               user                 @relation(fields: [student_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "student_user")
  school_attendence  school_attendence[]
  school_exam_result school_exam_result[]

  @@index([student_parent_id], map: "student_parent_idx")
  @@index([student_school_id], map: "student_school_idx")
  @@index([student_user_id], map: "student_user_idx")
}

model school_teacher {
  teacher_id        Int         @id @default(autoincrement())
  teacher_phone     String      @db.VarChar(15)
  tacher_status     Boolean?
  teacher_school_id Int
  teacher_user_id   Int
  user_school       user_school @relation(fields: [teacher_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_school_link")
  user              user        @relation(fields: [teacher_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_user")

  @@index([teacher_school_id], map: "teacher_school_idx")
  @@index([teacher_user_id], map: "teacher_user_idx")
}

model user {
  user_id              Int                    @id @default(autoincrement())
  user_name            String                 @db.VarChar(45)
  user_email           String                 @unique(map: "email") @db.VarChar(45)
  user_passward        String                 @db.VarChar(70)
  user_status          Int                    @db.TinyInt
  user_is_removed      Int                    @db.TinyInt
  user_role            Int
  admin_user           admin_user?
  school_parent        school_parent[]
  school_student       school_student[]
  school_teacher       school_teacher[]
  user_package_payment user_package_payment[]
  user_school          user_school[]
  user_subscription    user_subscription?
  user_verification    user_verification?
}

model user_package_payment {
  package_id           Int      @id @default(autoincrement())
  package_name         String   @db.VarChar(45)
  package_paid_amount  String   @db.VarChar(45)
  package_payment_date DateTime @db.Date
  package_detail       String?  @db.VarChar(100)
  package_user_id      Int
  user                 user     @relation(fields: [package_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "package_user")

  @@index([package_user_id], map: "package_user_idx")
}

model user_school {
  school_id          Int                  @id @default(autoincrement())
  school_name        String               @db.VarChar(45)
  school_desc        String?              @db.MediumText
  school_email       String               @db.VarChar(45)
  school_logo        String?              @db.VarChar(100)
  school_status      Int?                 @db.TinyInt
  school_is_removed  Int                  @db.TinyInt
  school_user_id     Int
  user               user                 @relation(fields: [school_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "school_user")
  admin_user         admin_user?
  school_attendence  school_attendence[]
  school_class_room  school_class_room[]
  school_course      school_course[]
  school_exam        school_exam[]
  school_exam_result school_exam_result[]
  school_exam_type   school_exam_type[]
  school_grade       school_grade[]
  school_parent      school_parent[]
  school_student     school_student[]
  school_teacher     school_teacher[]
  school_timetable   school_timetable[]

  @@index([school_user_id], map: "school_user_idx")
}

model school_timetable {
  timetable_id      Int               @id @default(autoincrement())
  tt_day            String            @db.VarChar(45)
  tt_time_start     DateTime          @db.Time(0)
  tt_time_end       DateTime          @db.Time(0)
  tt_subject_id     Int
  tt_class_id       Int
  tt_school_id      Int
  school_class_room school_class_room @relation(fields: [tt_class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction, map: "timetable_class")
  user_school       user_school       @relation(fields: [tt_school_id], references: [school_id], onDelete: NoAction, onUpdate: NoAction, map: "timetable_school")
  school_course     school_course     @relation(fields: [tt_subject_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "timetable_course")

  @@index([tt_class_id], map: "timetable_class_idx")
  @@index([tt_subject_id], map: "timetable_course_idx")
  @@index([tt_school_id], map: "timetable_school_idx")
}

model plan {
  plan_id           Int                 @id @default(autoincrement())
  plan_name         String              @db.VarChar(45)
  plan_price        Decimal             @db.Decimal(10, 0)
  plan_is_active    Int                 @db.TinyInt
  user_subscription user_subscription[]
}

model user_subscription {
  subscription_id Int      @id @default(autoincrement())
  sb_user_id      Int      @unique(map: "sb_user_id_UNIQUE")
  sb_plan_id      Int
  sb_start_time   DateTime @db.Date
  sb_end_time     DateTime @db.Date
  plan            plan     @relation(fields: [sb_plan_id], references: [plan_id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan")
  user            user     @relation(fields: [sb_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_user")

  @@index([sb_plan_id], map: "subscription_plan_idx")
  @@index([sb_user_id], map: "subscription_user_idx")
}

model user_verification {
  id               Int    @id @default(autoincrement())
  user_id          Int    @unique(map: "user_id_UNIQUE")
  is_verified      Int    @db.TinyInt
  verifiction_code String @unique(map: "verifiction_code_UNIQUE") @db.VarChar(200)
  user             user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "verify_user")

  @@index([user_id], map: "verify_user_idx")
}

model admin_user {
  admin_id        Int         @id @default(autoincrement())
  admin_user_id   Int         @unique(map: "admin_user_id_UNIQUE")
  admin_school_id Int         @unique(map: "admin_school_id_UNIQUE")
  user_school     user_school @relation(fields: [admin_school_id], references: [school_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_school")
  user            user        @relation(fields: [admin_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "admin_user")

  @@index([admin_school_id], map: "admin_school_idx")
  @@index([admin_user_id], map: "admin_user_idx")
}
